In[289]:=
ClearAll["Global`*"] (* Clear all variables and definitions *)
numofbots = 20; (* Number of agents *)
dim = 2; (* Dimension *)
totaltime = 100; (* Total time to simulate for *)
initpos = RandomReal[{1, 1.5}, {numofbots, dim}];
(* Initial positions, generated randomly *)
initvel = RandomReal[{- .1, 0.1}, {numofbots, dim}];
(* Initial velocities, generated randomly *)
sphereRadius = 3;
(* Distance function - depends on the metric tensor,
and difficult to calculate in general*)
dist[pos1_, pos2_] := sphereRadius * ArcCos[Sin[pos1[[2]]] * Sin[pos2[[2]]] +
Cos[pos1[[2]]] * Cos[pos2[[2]]] * Cos[pos1[[1]] - pos2[[1]]]]
u[pos1_, pos2_] := dist[pos1, pos2] ^ 2; (* Potential function,
based on distance function*)
g = {{sphereRadius ^ 2 * Cos[x[2]] ^ 2, 0}, {0, sphereRadius ^ 2}};
(* Metric tensor for spherical surface *)
ginv = Inverse[g]; (* Inverse of the metric tensor *)
christoffel[a_, i_, j_] := 1  2 * SumInverse[g][[a]][[k]] *
D[g[[i, k]], x[j]] + D[g[[j, k]], x[i]] - D[g[[i, j]], x[k]], {k, 2};
(* Christoffel symbols for the space *)
During evaluation of In[289]:=
Syntax::sntxf: "" cannot be followed by "(* Total time to simulate for *)".
In[227]:= eqns=TableWith{i=i},Table[r[i][j]'[t]==v[i][j][t],{j,dim}],Tablev[i][j]'[t]==1-Sumv[i][k][t]*v[i][l][t]*g[[k,l]]/.Table[x[ii]→r[i][ii][t],{ii,dim}],{k,dim},{l,dim}*v[i][j][t]-1  numofbots*SumSumginv[[j,jj]]/.Table[x[ii]→r[i][ii][t],{ii,dim}]*D[u[Table[r[i][k][t],{k,dim}],Table[r[ii][k][t],{k,dim}]],r[i][jj][t]],{jj,dim},{ii,numofbots}-Sumchristoffel[j,k,l]/.Table[x[jj]->r[i][jj][t],{jj,dim}]*v[i][k][t]*v[i][l][t],{k,dim},{l,dim},{j,dim},Table[r[i][j][0]==initpos[[i]][[j]],{j,dim}],Table[v[i][j][0]==initvel[[i]][[j]],{j,dim}]
,{i,numofbots};(*Equations for the model*)unknownFun=Table[r[i][j],{i,numofbots},{j,dim}];
(*unknowns for the model:positions of each agent*)
In[227]:= sol=First@NDSolve[eqns,unknownFun,{t,0,totaltime},"Method"→{"EquationSimplification"→{Automatic,"TimeConstraint"→10}}];
(*Solve the diff eq*)
swarmpos=unknownFun/.sol;(*calculate the unknowns given the solution*)
During evaluation of In[227]:= NDSolve::deqn: Equation or list of equations expected instead of eqns in the first argument eqns.
During evaluation of In[227]:= ReplaceAll::reps: {eqns} is neither a list of replacement rules nor a valid dispatch table, and so cannot be used for replacing.
In[229]:= project[vec_]:={Cos[vec[[2]]]*Cos[vec[[1]]],Cos[vec[[2]]]*Sin[vec[[1]]],Sin[vec[[2]]]};
(*Define projection onto spherical surface*)
funddom[t_]:=Show[{Graphics[Table[Point[Table[swarmpos[[i]][[j]][t],{j,dim}]],{i,numofbots}],PlotRange→{{-π,π},{-π,π}},Axes→True]}];
(*Define animation on fundamental domain*)
manif[t_]:=Show[{Graphics3D[{Sphere[],Table[Point[project[Table[swarmpos[[i]][[j]][t],{j,dim}]]],{i,numofbots}]},PlotRange→{{-1,1},{-1,1},{-1,1}},ViewPoint→{1,1,1},ImageSize→Large]}]
(*Define animation on spherical surface*)
In[232]:= Animate[GraphicsGrid[{{funddom[t],manif[t]}}],{t,0,totaltime}]
(*Display both animations side-by-side*)
Out[232]= Manipulate[GraphicsGrid[{{funddom[t], manif[t]}}], 
  {{t, 87.95721054077148}, 0, 100, AppearanceElements -> 
    {"ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
     "DirectionButton"}}, ControlType -> Animator, 
  AppearanceElements -> None, DefaultBaseStyle -> "Animate", 
  DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> True, 
  ShrinkingDelay -> 10.]